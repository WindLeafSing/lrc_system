// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coordinator.proto

#include "coordinator.pb.h"
#include "coordinator.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace coordinator {

static const char* FileSystem_method_names[] = {
  "/coordinator.FileSystem/createDir",
  "/coordinator.FileSystem/uploadStripe",
  "/coordinator.FileSystem/downloadStripe",
  "/coordinator.FileSystem/deleteStripe",
};

std::unique_ptr< FileSystem::Stub> FileSystem::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileSystem::Stub> stub(new FileSystem::Stub(channel));
  return stub;
}

FileSystem::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_createDir_(FileSystem_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_uploadStripe_(FileSystem_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_downloadStripe_(FileSystem_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deleteStripe_(FileSystem_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FileSystem::Stub::createDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::coordinator::RequestResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_createDir_, context, request, response);
}

void FileSystem::Stub::experimental_async::createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_createDir_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_createDir_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_createDir_, context, request, response, reactor);
}

void FileSystem::Stub::experimental_async::createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_createDir_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* FileSystem::Stub::AsynccreateDirRaw(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::RequestResult>::Create(channel_.get(), cq, rpcmethod_createDir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* FileSystem::Stub::PrepareAsynccreateDirRaw(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::RequestResult>::Create(channel_.get(), cq, rpcmethod_createDir_, context, request, false);
}

::grpc::Status FileSystem::Stub::uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::coordinator::StripeLocation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_uploadStripe_, context, request, response);
}

void FileSystem::Stub::experimental_async::uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_uploadStripe_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_uploadStripe_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_uploadStripe_, context, request, response, reactor);
}

void FileSystem::Stub::experimental_async::uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_uploadStripe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* FileSystem::Stub::AsyncuploadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::StripeLocation>::Create(channel_.get(), cq, rpcmethod_uploadStripe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* FileSystem::Stub::PrepareAsyncuploadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::StripeLocation>::Create(channel_.get(), cq, rpcmethod_uploadStripe_, context, request, false);
}

::grpc::Status FileSystem::Stub::downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::coordinator::StripeLocation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_downloadStripe_, context, request, response);
}

void FileSystem::Stub::experimental_async::downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_downloadStripe_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_downloadStripe_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_downloadStripe_, context, request, response, reactor);
}

void FileSystem::Stub::experimental_async::downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_downloadStripe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* FileSystem::Stub::AsyncdownloadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::StripeLocation>::Create(channel_.get(), cq, rpcmethod_downloadStripe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* FileSystem::Stub::PrepareAsyncdownloadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::StripeLocation>::Create(channel_.get(), cq, rpcmethod_downloadStripe_, context, request, false);
}

::grpc::Status FileSystem::Stub::deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::coordinator::RequestResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_deleteStripe_, context, request, response);
}

void FileSystem::Stub::experimental_async::deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_deleteStripe_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_deleteStripe_, context, request, response, std::move(f));
}

void FileSystem::Stub::experimental_async::deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_deleteStripe_, context, request, response, reactor);
}

void FileSystem::Stub::experimental_async::deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_deleteStripe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* FileSystem::Stub::AsyncdeleteStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::RequestResult>::Create(channel_.get(), cq, rpcmethod_deleteStripe_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* FileSystem::Stub::PrepareAsyncdeleteStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::coordinator::RequestResult>::Create(channel_.get(), cq, rpcmethod_deleteStripe_, context, request, false);
}

FileSystem::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::coordinator::Path, ::coordinator::RequestResult>(
          std::mem_fn(&FileSystem::Service::createDir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::coordinator::StripeInfo, ::coordinator::StripeLocation>(
          std::mem_fn(&FileSystem::Service::uploadStripe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::coordinator::StripeId, ::coordinator::StripeLocation>(
          std::mem_fn(&FileSystem::Service::downloadStripe), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileSystem_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FileSystem::Service, ::coordinator::StripeId, ::coordinator::RequestResult>(
          std::mem_fn(&FileSystem::Service::deleteStripe), this)));
}

FileSystem::Service::~Service() {
}

::grpc::Status FileSystem::Service::createDir(::grpc::ServerContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::uploadStripe(::grpc::ServerContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::downloadStripe(::grpc::ServerContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileSystem::Service::deleteStripe(::grpc::ServerContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace coordinator

