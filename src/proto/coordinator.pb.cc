// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#include "coordinator.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace coordinator {
class StripeIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeId> _instance;
} _StripeId_default_instance_;
class StripeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeInfo> _instance;
} _StripeInfo_default_instance_;
class StripeLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StripeLocation> _instance;
} _StripeLocation_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class RequestResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestResult> _instance;
} _RequestResult_default_instance_;
}  // namespace coordinator
static void InitDefaultsscc_info_Path_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_Path_default_instance_;
    new (ptr) ::coordinator::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Path_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Path_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_RequestResult_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_RequestResult_default_instance_;
    new (ptr) ::coordinator::RequestResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::RequestResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestResult_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestResult_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeId_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeId_default_instance_;
    new (ptr) ::coordinator::StripeId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeId_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeId_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeInfo_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeInfo_default_instance_;
    new (ptr) ::coordinator::StripeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeInfo_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeInfo_coordinator_2eproto}, {}};

static void InitDefaultsscc_info_StripeLocation_coordinator_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::coordinator::_StripeLocation_default_instance_;
    new (ptr) ::coordinator::StripeLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::coordinator::StripeLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StripeLocation_coordinator_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StripeLocation_coordinator_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_coordinator_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_coordinator_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_coordinator_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeId, stripeid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripeid_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_k_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_l_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeInfo, stripe_g_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, dataloc_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, localparityloc_),
  PROTOBUF_FIELD_OFFSET(::coordinator::StripeLocation, globalparityloc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::Path, dstpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::coordinator::RequestResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::coordinator::RequestResult, trueorfalse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::coordinator::StripeId)},
  { 6, -1, sizeof(::coordinator::StripeInfo)},
  { 15, -1, sizeof(::coordinator::StripeLocation)},
  { 23, -1, sizeof(::coordinator::Path)},
  { 29, -1, sizeof(::coordinator::RequestResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_StripeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::coordinator::_RequestResult_default_instance_),
};

const char descriptor_table_protodef_coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021coordinator.proto\022\013coordinator\"\034\n\010Stri"
  "peId\022\020\n\010stripeid\030\001 \001(\005\"T\n\nStripeInfo\022\020\n\010"
  "stripeid\030\001 \001(\005\022\020\n\010stripe_k\030\002 \001(\005\022\020\n\010stri"
  "pe_l\030\003 \001(\005\022\020\n\010stripe_g\030\004 \001(\005\"R\n\016StripeLo"
  "cation\022\017\n\007dataLoc\030\001 \003(\t\022\026\n\016localparityLo"
  "c\030\002 \003(\t\022\027\n\017globalparityLoc\030\003 \003(\t\"\027\n\004Path"
  "\022\017\n\007dstpath\030\001 \001(\t\"$\n\rRequestResult\022\023\n\013tr"
  "ueorfalse\030\001 \001(\0102\227\002\n\nFileSystem\022:\n\tcreate"
  "Dir\022\021.coordinator.Path\032\032.coordinator.Req"
  "uestResult\022D\n\014uploadStripe\022\027.coordinator"
  ".StripeInfo\032\033.coordinator.StripeLocation"
  "\022D\n\016downloadStripe\022\025.coordinator.StripeI"
  "d\032\033.coordinator.StripeLocation\022A\n\014delete"
  "Stripe\022\025.coordinator.StripeId\032\032.coordina"
  "tor.RequestResultb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_coordinator_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_coordinator_2eproto_sccs[5] = {
  &scc_info_Path_coordinator_2eproto.base,
  &scc_info_RequestResult_coordinator_2eproto.base,
  &scc_info_StripeId_coordinator_2eproto.base,
  &scc_info_StripeInfo_coordinator_2eproto.base,
  &scc_info_StripeLocation_coordinator_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_coordinator_2eproto_once;
static bool descriptor_table_coordinator_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto = {
  &descriptor_table_coordinator_2eproto_initialized, descriptor_table_protodef_coordinator_2eproto, "coordinator.proto", 585,
  &descriptor_table_coordinator_2eproto_once, descriptor_table_coordinator_2eproto_sccs, descriptor_table_coordinator_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_coordinator_2eproto::offsets,
  file_level_metadata_coordinator_2eproto, 5, file_level_enum_descriptors_coordinator_2eproto, file_level_service_descriptors_coordinator_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_coordinator_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_coordinator_2eproto), true);
namespace coordinator {

// ===================================================================

void StripeId::InitAsDefaultInstance() {
}
class StripeId::_Internal {
 public:
};

StripeId::StripeId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeId)
}
StripeId::StripeId(const StripeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stripeid_ = from.stripeid_;
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeId)
}

void StripeId::SharedCtor() {
  stripeid_ = 0;
}

StripeId::~StripeId() {
  // @@protoc_insertion_point(destructor:coordinator.StripeId)
  SharedDtor();
}

void StripeId::SharedDtor() {
}

void StripeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeId& StripeId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeId_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeId::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stripeid_ = 0;
  _internal_metadata_.Clear();
}

const char* StripeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeId)
  return target;
}

size_t StripeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeId)
    MergeFrom(*source);
  }
}

void StripeId::MergeFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
}

void StripeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeId::CopyFrom(const StripeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeId::IsInitialized() const {
  return true;
}

void StripeId::InternalSwap(StripeId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeInfo::InitAsDefaultInstance() {
}
class StripeInfo::_Internal {
 public:
};

StripeInfo::StripeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeInfo)
}
StripeInfo::StripeInfo(const StripeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stripeid_, &from.stripeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&stripe_g_) -
    reinterpret_cast<char*>(&stripeid_)) + sizeof(stripe_g_));
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeInfo)
}

void StripeInfo::SharedCtor() {
  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripe_g_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(stripe_g_));
}

StripeInfo::~StripeInfo() {
  // @@protoc_insertion_point(destructor:coordinator.StripeInfo)
  SharedDtor();
}

void StripeInfo::SharedDtor() {
}

void StripeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeInfo& StripeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeInfo_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&stripeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stripe_g_) -
      reinterpret_cast<char*>(&stripeid_)) + sizeof(stripe_g_));
  _internal_metadata_.Clear();
}

const char* StripeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 stripeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          stripeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stripe_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stripe_l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 stripe_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stripe_g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stripeid(), target);
  }

  // int32 stripe_k = 2;
  if (this->stripe_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_stripe_k(), target);
  }

  // int32 stripe_l = 3;
  if (this->stripe_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_stripe_l(), target);
  }

  // int32 stripe_g = 4;
  if (this->stripe_g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_stripe_g(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeInfo)
  return target;
}

size_t StripeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stripeid = 1;
  if (this->stripeid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripeid());
  }

  // int32 stripe_k = 2;
  if (this->stripe_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_k());
  }

  // int32 stripe_l = 3;
  if (this->stripe_l() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_l());
  }

  // int32 stripe_g = 4;
  if (this->stripe_g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stripe_g());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeInfo)
    MergeFrom(*source);
  }
}

void StripeInfo::MergeFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stripeid() != 0) {
    _internal_set_stripeid(from._internal_stripeid());
  }
  if (from.stripe_k() != 0) {
    _internal_set_stripe_k(from._internal_stripe_k());
  }
  if (from.stripe_l() != 0) {
    _internal_set_stripe_l(from._internal_stripe_l());
  }
  if (from.stripe_g() != 0) {
    _internal_set_stripe_g(from._internal_stripe_g());
  }
}

void StripeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeInfo::CopyFrom(const StripeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeInfo::IsInitialized() const {
  return true;
}

void StripeInfo::InternalSwap(StripeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(stripeid_, other->stripeid_);
  swap(stripe_k_, other->stripe_k_);
  swap(stripe_l_, other->stripe_l_);
  swap(stripe_g_, other->stripe_g_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StripeLocation::InitAsDefaultInstance() {
}
class StripeLocation::_Internal {
 public:
};

StripeLocation::StripeLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.StripeLocation)
}
StripeLocation::StripeLocation(const StripeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dataloc_(from.dataloc_),
      localparityloc_(from.localparityloc_),
      globalparityloc_(from.globalparityloc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:coordinator.StripeLocation)
}

void StripeLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StripeLocation_coordinator_2eproto.base);
}

StripeLocation::~StripeLocation() {
  // @@protoc_insertion_point(destructor:coordinator.StripeLocation)
  SharedDtor();
}

void StripeLocation::SharedDtor() {
}

void StripeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StripeLocation& StripeLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StripeLocation_coordinator_2eproto.base);
  return *internal_default_instance();
}


void StripeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dataloc_.Clear();
  localparityloc_.Clear();
  globalparityloc_.Clear();
  _internal_metadata_.Clear();
}

const char* StripeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string dataLoc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dataloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.StripeLocation.dataLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string localparityLoc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_localparityloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.StripeLocation.localparityLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string globalparityLoc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_globalparityloc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.StripeLocation.globalparityLoc"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StripeLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.StripeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string dataLoc = 1;
  for (int i = 0, n = this->_internal_dataloc_size(); i < n; i++) {
    const auto& s = this->_internal_dataloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.StripeLocation.dataLoc");
    target = stream->WriteString(1, s, target);
  }

  // repeated string localparityLoc = 2;
  for (int i = 0, n = this->_internal_localparityloc_size(); i < n; i++) {
    const auto& s = this->_internal_localparityloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.StripeLocation.localparityLoc");
    target = stream->WriteString(2, s, target);
  }

  // repeated string globalparityLoc = 3;
  for (int i = 0, n = this->_internal_globalparityloc_size(); i < n; i++) {
    const auto& s = this->_internal_globalparityloc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.StripeLocation.globalparityLoc");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.StripeLocation)
  return target;
}

size_t StripeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.StripeLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dataLoc = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dataloc_.size());
  for (int i = 0, n = dataloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dataloc_.Get(i));
  }

  // repeated string localparityLoc = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(localparityloc_.size());
  for (int i = 0, n = localparityloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      localparityloc_.Get(i));
  }

  // repeated string globalparityLoc = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(globalparityloc_.size());
  for (int i = 0, n = globalparityloc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      globalparityloc_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StripeLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const StripeLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StripeLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.StripeLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.StripeLocation)
    MergeFrom(*source);
  }
}

void StripeLocation::MergeFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.StripeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dataloc_.MergeFrom(from.dataloc_);
  localparityloc_.MergeFrom(from.localparityloc_);
  globalparityloc_.MergeFrom(from.globalparityloc_);
}

void StripeLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StripeLocation::CopyFrom(const StripeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.StripeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StripeLocation::IsInitialized() const {
  return true;
}

void StripeLocation::InternalSwap(StripeLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dataloc_.InternalSwap(&other->dataloc_);
  localparityloc_.InternalSwap(&other->localparityloc_);
  globalparityloc_.InternalSwap(&other->globalparityloc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StripeLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
class Path::_Internal {
 public:
};

Path::Path()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dstpath().empty()) {
    dstpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dstpath_);
  }
  // @@protoc_insertion_point(copy_constructor:coordinator.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_coordinator_2eproto.base);
  dstpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:coordinator.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  dstpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_coordinator_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dstpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dstpath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dstpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "coordinator.Path.dstpath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dstpath = 1;
  if (this->dstpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dstpath().data(), static_cast<int>(this->_internal_dstpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "coordinator.Path.dstpath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dstpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dstpath = 1;
  if (this->dstpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dstpath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dstpath().size() > 0) {

    dstpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dstpath_);
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dstpath_.Swap(&other->dstpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestResult::InitAsDefaultInstance() {
}
class RequestResult::_Internal {
 public:
};

RequestResult::RequestResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:coordinator.RequestResult)
}
RequestResult::RequestResult(const RequestResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trueorfalse_ = from.trueorfalse_;
  // @@protoc_insertion_point(copy_constructor:coordinator.RequestResult)
}

void RequestResult::SharedCtor() {
  trueorfalse_ = false;
}

RequestResult::~RequestResult() {
  // @@protoc_insertion_point(destructor:coordinator.RequestResult)
  SharedDtor();
}

void RequestResult::SharedDtor() {
}

void RequestResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestResult& RequestResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestResult_coordinator_2eproto.base);
  return *internal_default_instance();
}


void RequestResult::Clear() {
// @@protoc_insertion_point(message_clear_start:coordinator.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trueorfalse_ = false;
  _internal_metadata_.Clear();
}

const char* RequestResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool trueorfalse = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          trueorfalse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:coordinator.RequestResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_trueorfalse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:coordinator.RequestResult)
  return target;
}

size_t RequestResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:coordinator.RequestResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool trueorfalse = 1;
  if (this->trueorfalse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:coordinator.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:coordinator.RequestResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:coordinator.RequestResult)
    MergeFrom(*source);
  }
}

void RequestResult::MergeFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:coordinator.RequestResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trueorfalse() != 0) {
    _internal_set_trueorfalse(from._internal_trueorfalse());
  }
}

void RequestResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:coordinator.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestResult::CopyFrom(const RequestResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:coordinator.RequestResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestResult::IsInitialized() const {
  return true;
}

void RequestResult::InternalSwap(RequestResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trueorfalse_, other->trueorfalse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace coordinator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::coordinator::StripeId* Arena::CreateMaybeMessage< ::coordinator::StripeId >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeId >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeInfo* Arena::CreateMaybeMessage< ::coordinator::StripeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::StripeLocation* Arena::CreateMaybeMessage< ::coordinator::StripeLocation >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::StripeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::Path* Arena::CreateMaybeMessage< ::coordinator::Path >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::coordinator::RequestResult* Arena::CreateMaybeMessage< ::coordinator::RequestResult >(Arena* arena) {
  return Arena::CreateInternal< ::coordinator::RequestResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
