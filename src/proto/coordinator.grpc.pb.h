// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coordinator.proto
#ifndef GRPC_coordinator_2eproto__INCLUDED
#define GRPC_coordinator_2eproto__INCLUDED

#include "coordinator.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace coordinator {

// client side stub
// coordinator size implement
class FileSystem final {
 public:
  static constexpr char const* service_full_name() {
    return "coordinator.FileSystem";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status createDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::coordinator::RequestResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>> AsynccreateDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>>(AsynccreateDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>> PrepareAsynccreateDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>>(PrepareAsynccreateDirRaw(context, request, cq));
    }
    virtual ::grpc::Status uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::coordinator::StripeLocation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>> AsyncuploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>>(AsyncuploadStripeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>> PrepareAsyncuploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>>(PrepareAsyncuploadStripeRaw(context, request, cq));
    }
    virtual ::grpc::Status downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::coordinator::StripeLocation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>> AsyncdownloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>>(AsyncdownloadStripeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>> PrepareAsyncdownloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>>(PrepareAsyncdownloadStripeRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::coordinator::RequestResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>> AsyncdeleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>>(AsyncdeleteStripeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>> PrepareAsyncdeleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>>(PrepareAsyncdeleteStripeRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>* AsynccreateDirRaw(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>* PrepareAsynccreateDirRaw(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>* AsyncuploadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>* PrepareAsyncuploadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>* AsyncdownloadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::StripeLocation>* PrepareAsyncdownloadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>* AsyncdeleteStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::coordinator::RequestResult>* PrepareAsyncdeleteStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status createDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::coordinator::RequestResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>> AsynccreateDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>>(AsynccreateDirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>> PrepareAsynccreateDir(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>>(PrepareAsynccreateDirRaw(context, request, cq));
    }
    ::grpc::Status uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::coordinator::StripeLocation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>> AsyncuploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>>(AsyncuploadStripeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>> PrepareAsyncuploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>>(PrepareAsyncuploadStripeRaw(context, request, cq));
    }
    ::grpc::Status downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::coordinator::StripeLocation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>> AsyncdownloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>>(AsyncdownloadStripeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>> PrepareAsyncdownloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>>(PrepareAsyncdownloadStripeRaw(context, request, cq));
    }
    ::grpc::Status deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::coordinator::RequestResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>> AsyncdeleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>>(AsyncdeleteStripeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>> PrepareAsyncdeleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>>(PrepareAsyncdeleteStripeRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) override;
      void createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void createDir(::grpc::ClientContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void createDir(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) override;
      void uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void uploadStripe(::grpc::ClientContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void uploadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) override;
      void downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void downloadStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void downloadStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::StripeLocation* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) override;
      void deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void deleteStripe(::grpc::ClientContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void deleteStripe(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::coordinator::RequestResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* AsynccreateDirRaw(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* PrepareAsynccreateDirRaw(::grpc::ClientContext* context, const ::coordinator::Path& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* AsyncuploadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* PrepareAsyncuploadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* AsyncdownloadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::StripeLocation>* PrepareAsyncdownloadStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* AsyncdeleteStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::coordinator::RequestResult>* PrepareAsyncdeleteStripeRaw(::grpc::ClientContext* context, const ::coordinator::StripeId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createDir_;
    const ::grpc::internal::RpcMethod rpcmethod_uploadStripe_;
    const ::grpc::internal::RpcMethod rpcmethod_downloadStripe_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteStripe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status createDir(::grpc::ServerContext* context, const ::coordinator::Path* request, ::coordinator::RequestResult* response);
    virtual ::grpc::Status uploadStripe(::grpc::ServerContext* context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response);
    virtual ::grpc::Status downloadStripe(::grpc::ServerContext* context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response);
    virtual ::grpc::Status deleteStripe(::grpc::ServerContext* context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createDir() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDir(::grpc::ServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateDir(::grpc::ServerContext* context, ::coordinator::Path* request, ::grpc::ServerAsyncResponseWriter< ::coordinator::RequestResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_uploadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_uploadStripe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_uploadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadStripe(::grpc::ServerContext* context, ::coordinator::StripeInfo* request, ::grpc::ServerAsyncResponseWriter< ::coordinator::StripeLocation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_downloadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_downloadStripe() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_downloadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadStripe(::grpc::ServerContext* context, ::coordinator::StripeId* request, ::grpc::ServerAsyncResponseWriter< ::coordinator::StripeLocation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteStripe() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_deleteStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteStripe(::grpc::ServerContext* context, ::coordinator::StripeId* request, ::grpc::ServerAsyncResponseWriter< ::coordinator::RequestResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createDir<WithAsyncMethod_uploadStripe<WithAsyncMethod_downloadStripe<WithAsyncMethod_deleteStripe<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_createDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_createDir() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::Path, ::coordinator::RequestResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::coordinator::Path* request, ::coordinator::RequestResult* response) { return this->createDir(context, request, response); }));}
    void SetMessageAllocatorFor_createDir(
        ::grpc::experimental::MessageAllocator< ::coordinator::Path, ::coordinator::RequestResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::Path, ::coordinator::RequestResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_createDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDir(::grpc::ServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* createDir(
      ::grpc::CallbackServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* createDir(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_uploadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_uploadStripe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::StripeInfo, ::coordinator::StripeLocation>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::coordinator::StripeInfo* request, ::coordinator::StripeLocation* response) { return this->uploadStripe(context, request, response); }));}
    void SetMessageAllocatorFor_uploadStripe(
        ::grpc::experimental::MessageAllocator< ::coordinator::StripeInfo, ::coordinator::StripeLocation>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::StripeInfo, ::coordinator::StripeLocation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_uploadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* uploadStripe(
      ::grpc::CallbackServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* uploadStripe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_downloadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_downloadStripe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::StripeId, ::coordinator::StripeLocation>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::coordinator::StripeId* request, ::coordinator::StripeLocation* response) { return this->downloadStripe(context, request, response); }));}
    void SetMessageAllocatorFor_downloadStripe(
        ::grpc::experimental::MessageAllocator< ::coordinator::StripeId, ::coordinator::StripeLocation>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::StripeId, ::coordinator::StripeLocation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_downloadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* downloadStripe(
      ::grpc::CallbackServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* downloadStripe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_deleteStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_deleteStripe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::StripeId, ::coordinator::RequestResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::coordinator::StripeId* request, ::coordinator::RequestResult* response) { return this->deleteStripe(context, request, response); }));}
    void SetMessageAllocatorFor_deleteStripe(
        ::grpc::experimental::MessageAllocator< ::coordinator::StripeId, ::coordinator::RequestResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::coordinator::StripeId, ::coordinator::RequestResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_deleteStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* deleteStripe(
      ::grpc::CallbackServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* deleteStripe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_createDir<ExperimentalWithCallbackMethod_uploadStripe<ExperimentalWithCallbackMethod_downloadStripe<ExperimentalWithCallbackMethod_deleteStripe<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_createDir<ExperimentalWithCallbackMethod_uploadStripe<ExperimentalWithCallbackMethod_downloadStripe<ExperimentalWithCallbackMethod_deleteStripe<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createDir() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDir(::grpc::ServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_uploadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_uploadStripe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_uploadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_downloadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_downloadStripe() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_downloadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteStripe() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_deleteStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createDir() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDir(::grpc::ServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateDir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_uploadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_uploadStripe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_uploadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuploadStripe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_downloadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_downloadStripe() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_downloadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdownloadStripe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteStripe() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_deleteStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteStripe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_createDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_createDir() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createDir(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_createDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createDir(::grpc::ServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* createDir(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* createDir(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_uploadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_uploadStripe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->uploadStripe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_uploadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status uploadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* uploadStripe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* uploadStripe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_downloadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_downloadStripe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->downloadStripe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_downloadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status downloadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* downloadStripe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* downloadStripe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_deleteStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_deleteStripe() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteStripe(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_deleteStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* deleteStripe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* deleteStripe(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createDir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createDir() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::coordinator::Path, ::coordinator::RequestResult>(std::bind(&WithStreamedUnaryMethod_createDir<BaseClass>::StreamedcreateDir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_createDir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createDir(::grpc::ServerContext* /*context*/, const ::coordinator::Path* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateDir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coordinator::Path,::coordinator::RequestResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_uploadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_uploadStripe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::coordinator::StripeInfo, ::coordinator::StripeLocation>(std::bind(&WithStreamedUnaryMethod_uploadStripe<BaseClass>::StreameduploadStripe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_uploadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status uploadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeInfo* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduploadStripe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coordinator::StripeInfo,::coordinator::StripeLocation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_downloadStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_downloadStripe() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::coordinator::StripeId, ::coordinator::StripeLocation>(std::bind(&WithStreamedUnaryMethod_downloadStripe<BaseClass>::StreameddownloadStripe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_downloadStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status downloadStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::StripeLocation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddownloadStripe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coordinator::StripeId,::coordinator::StripeLocation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteStripe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteStripe() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::coordinator::StripeId, ::coordinator::RequestResult>(std::bind(&WithStreamedUnaryMethod_deleteStripe<BaseClass>::StreameddeleteStripe, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_deleteStripe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteStripe(::grpc::ServerContext* /*context*/, const ::coordinator::StripeId* /*request*/, ::coordinator::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteStripe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::coordinator::StripeId,::coordinator::RequestResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createDir<WithStreamedUnaryMethod_uploadStripe<WithStreamedUnaryMethod_downloadStripe<WithStreamedUnaryMethod_deleteStripe<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createDir<WithStreamedUnaryMethod_uploadStripe<WithStreamedUnaryMethod_downloadStripe<WithStreamedUnaryMethod_deleteStripe<Service > > > > StreamedService;
};

}  // namespace coordinator


#endif  // GRPC_coordinator_2eproto__INCLUDED
